[{"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\header.js":"4","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\isEmpty.js":"5","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\LandingPage.js":"6","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\reducerIndex.js":"7","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\appStateReducer.js":"8","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\getBlogByIdReducer.js":"9","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\getAllBlogReducer.js":"10","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\actionIndex.js":"11","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\comment.js":"12","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\changePassword.js":"13","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\createBlog.js":"14","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\countryAction.js":"15","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\contactUsAction.js":"16","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\deleteBlog.js":"17","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\forgetPassword.js":"18","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getAllBlog.js":"19","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getBlogById.js":"20","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getUserById.js":"21","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\loginAction.js":"22","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\registerAction.js":"23","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\resetPassword.js":"24","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\stateAction.js":"25","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\updateProfileAction.js":"26","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Store\\Store.js":"27","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\rootReducer\\RootReducer.js":"28","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\State\\State.js":"29","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\FormikControl.js":"30","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Select.js":"31","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Textarea.js":"32","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Input.js":"33","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Radio.js":"34","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Checkbox.js":"35","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Datepicker.js":"36","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\States.js":"37","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Map.js":"38","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Country.js":"39","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\TextError.js":"40","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\HeaderAndSidebar.js":"41","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\SidebarData.js":"42","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Slider.js":"43","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\Header.js":"44","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Footer\\Footer.js":"45","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\Routes.js":"46","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\PrivateRouter.js":"47","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\Auth.js":"48","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\AllBlog.js":"49","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\Dashbord.js":"50","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\ResetPassword.js":"51","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\SingleBlog.js":"52","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\TableView.js":"53","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\UpdateProfile.js":"54","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Contact.js":"55","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Error404.js":"56","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\ForgetToNew.js":"57","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Forgot.js":"58","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Home.js":"59","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Login.js":"60","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\RegisterPage.js":"61","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\componentIndex.js":"62","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\screenIndex.js":"63","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\likeApi.js":"64","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\disLikeApi.js":"65","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\actionIndex.js":"66","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\changePassword.js":"67","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\comment.js":"68","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\contactUsAction.js":"69","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\countryAction.js":"70","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\createBlog.js":"71","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\deleteBlog.js":"72","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getUserById.js":"73","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\loginAction.js":"74","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\registerAction.js":"75","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\resetPassword.js":"76","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\stateAction.js":"77","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\updateProfileAction.js":"78","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getAllBlog.js":"79","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getBlogById.js":"80","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\forgetPassword.js":"81","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\likeApi.js":"82","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\disLikeApi.js":"83","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\store\\Store.js":"84","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\Routes.js":"85","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\PrivateRouter.js":"86","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\screenIndex.js":"87","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\Auth.js":"88","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\AllBlog.js":"89","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\Dashbord.js":"90","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\SingleBlog.js":"91","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\ResetPassword.js":"92","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\TableView.js":"93","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\UpdateProfile.js":"94","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Contact.js":"95","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Error404.js":"96","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\ForgetToNew.js":"97","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Home.js":"98","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Forgot.js":"99","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Login.js":"100","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\RegisterPage.js":"101","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\services\\isEmpty.js":"102","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\services\\header.js":"103","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\componentIndex.js":"104","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\Header.js":"105","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Footer\\Footer.js":"106","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\HeaderAndSidebar.js":"107","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\SidebarData.js":"108","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Checkbox.js":"109","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Country.js":"110","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Datepicker.js":"111","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\FormikControl.js":"112","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Input.js":"113","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Map.js":"114","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Radio.js":"115","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Select.js":"116","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Slider.js":"117","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\States.js":"118","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\TextError.js":"119","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Textarea.js":"120","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\reducerIndex.js":"121","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\getAllBlogReducer.js":"122","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\appStateReducer.js":"123","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\getBlogByIdReducer.js":"124","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\state\\State.js":"125","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\download.js":"126"},{"size":286,"mtime":1609999053543,"results":"127","hashOfConfig":"128"},{"size":528,"mtime":1609998994775,"results":"129","hashOfConfig":"128"},{"size":361,"mtime":1609495253860,"results":"130","hashOfConfig":"128"},{"size":656,"mtime":1609825660889,"results":"131","hashOfConfig":"128"},{"size":121,"mtime":1609495219446,"results":"132","hashOfConfig":"128"},{"size":415,"mtime":1609937850260,"results":"133","hashOfConfig":"128"},{"size":234,"mtime":1609838308558,"results":"134","hashOfConfig":"128"},{"size":7997,"mtime":1609906035871,"results":"135","hashOfConfig":"128"},{"size":798,"mtime":1609839571450,"results":"136","hashOfConfig":"128"},{"size":773,"mtime":1609839571450,"results":"137","hashOfConfig":"128"},{"size":3712,"mtime":1609905898149,"results":"138","hashOfConfig":"128"},{"size":1537,"mtime":1609837586917,"results":"139","hashOfConfig":"128"},{"size":1652,"mtime":1609837595066,"results":"140","hashOfConfig":"128"},{"size":1479,"mtime":1609837667799,"results":"141","hashOfConfig":"128"},{"size":1145,"mtime":1609837675327,"results":"142","hashOfConfig":"128"},{"size":1411,"mtime":1609837602015,"results":"143","hashOfConfig":"128"},{"size":1634,"mtime":1609840168155,"results":"144","hashOfConfig":"128"},{"size":1361,"mtime":1609837655638,"results":"145","hashOfConfig":"128"},{"size":1172,"mtime":1609906546826,"results":"146","hashOfConfig":"128"},{"size":1223,"mtime":1609837644845,"results":"147","hashOfConfig":"128"},{"size":1223,"mtime":1609837636764,"results":"148","hashOfConfig":"128"},{"size":1636,"mtime":1609903626078,"results":"149","hashOfConfig":"128"},{"size":1489,"mtime":1609836620442,"results":"150","hashOfConfig":"128"},{"size":1436,"mtime":1609837626226,"results":"151","hashOfConfig":"128"},{"size":1114,"mtime":1609837694264,"results":"152","hashOfConfig":"128"},{"size":1726,"mtime":1609914818251,"results":"153","hashOfConfig":"128"},{"size":318,"mtime":1609840177950,"results":"154","hashOfConfig":"128"},{"size":346,"mtime":1609938212404,"results":"155","hashOfConfig":"128"},{"size":1087,"mtime":1609905935506,"results":"156","hashOfConfig":"128"},{"size":953,"mtime":1609494296036,"results":"157","hashOfConfig":"128"},{"size":812,"mtime":1609841867908,"results":"158","hashOfConfig":"128"},{"size":476,"mtime":1609494344681,"results":"159","hashOfConfig":"128"},{"size":528,"mtime":1609913462500,"results":"160","hashOfConfig":"128"},{"size":1059,"mtime":1609841863902,"results":"161","hashOfConfig":"128"},{"size":1730,"mtime":1609915883904,"results":"162","hashOfConfig":"128"},{"size":1155,"mtime":1609841852211,"results":"163","hashOfConfig":"128"},{"size":891,"mtime":1609841906695,"results":"164","hashOfConfig":"128"},{"size":647,"mtime":1609494309974,"results":"165","hashOfConfig":"128"},{"size":890,"mtime":1609841843786,"results":"166","hashOfConfig":"128"},{"size":422,"mtime":1609742807625,"results":"167","hashOfConfig":"128"},{"size":4533,"mtime":1609921503192,"results":"168","hashOfConfig":"128"},{"size":618,"mtime":1609842003529,"results":"169","hashOfConfig":"128"},{"size":1400,"mtime":1609842862804,"results":"170","hashOfConfig":"128"},{"size":965,"mtime":1609841760069,"results":"171","hashOfConfig":"128"},{"size":430,"mtime":1609841814229,"results":"172","hashOfConfig":"128"},{"size":1898,"mtime":1609910381772,"results":"173","hashOfConfig":"128"},{"size":593,"mtime":1609843141582,"results":"174","hashOfConfig":"128"},{"size":201,"mtime":1609843139602,"results":"175","hashOfConfig":"128"},{"size":2572,"mtime":1609910816815,"results":"176","hashOfConfig":"128"},{"size":8448,"mtime":1609922173076,"results":"177","hashOfConfig":"128"},{"size":3785,"mtime":1609910418568,"results":"178","hashOfConfig":"128"},{"size":8493,"mtime":1609937238708,"results":"179","hashOfConfig":"128"},{"size":264,"mtime":1609925719200,"results":"180","hashOfConfig":"128"},{"size":11466,"mtime":1609916025685,"results":"181","hashOfConfig":"128"},{"size":6390,"mtime":1609846251864,"results":"182","hashOfConfig":"128"},{"size":169,"mtime":1609843458030,"results":"183","hashOfConfig":"128"},{"size":3555,"mtime":1609846227190,"results":"184","hashOfConfig":"128"},{"size":2572,"mtime":1609846241638,"results":"185","hashOfConfig":"128"},{"size":6277,"mtime":1609846333259,"results":"186","hashOfConfig":"128"},{"size":3659,"mtime":1609846266818,"results":"187","hashOfConfig":"128"},{"size":12668,"mtime":1609846270894,"results":"188","hashOfConfig":"128"},{"size":842,"mtime":1609846122142,"results":"189","hashOfConfig":"128"},{"size":844,"mtime":1609845942103,"results":"190","hashOfConfig":"128"},{"size":1481,"mtime":1609903156743,"results":"191","hashOfConfig":"128"},{"size":1533,"mtime":1609908451626,"results":"192","hashOfConfig":"128"},{"size":3911,"mtime":1610076994160,"results":"193","hashOfConfig":"128"},{"size":1652,"mtime":1609937851925,"results":"194","hashOfConfig":"128"},{"size":1537,"mtime":1609937851926,"results":"195","hashOfConfig":"128"},{"size":1411,"mtime":1609937851925,"results":"196","hashOfConfig":"128"},{"size":1145,"mtime":1609937851925,"results":"197","hashOfConfig":"128"},{"size":1479,"mtime":1609937851925,"results":"198","hashOfConfig":"128"},{"size":1634,"mtime":1609937851925,"results":"199","hashOfConfig":"128"},{"size":1222,"mtime":1609939384949,"results":"200","hashOfConfig":"128"},{"size":1636,"mtime":1609937852284,"results":"201","hashOfConfig":"128"},{"size":1489,"mtime":1609937851925,"results":"202","hashOfConfig":"128"},{"size":1513,"mtime":1609999938470,"results":"203","hashOfConfig":"128"},{"size":1114,"mtime":1609937851925,"results":"204","hashOfConfig":"128"},{"size":1726,"mtime":1609937851925,"results":"205","hashOfConfig":"128"},{"size":1172,"mtime":1609937851925,"results":"206","hashOfConfig":"128"},{"size":1223,"mtime":1609937851925,"results":"207","hashOfConfig":"128"},{"size":1526,"mtime":1609993399287,"results":"208","hashOfConfig":"128"},{"size":1481,"mtime":1609994675788,"results":"209","hashOfConfig":"128"},{"size":1533,"mtime":1609937851926,"results":"210","hashOfConfig":"128"},{"size":318,"mtime":1609840177950,"results":"211","hashOfConfig":"128"},{"size":1859,"mtime":1610010694112,"results":"212","hashOfConfig":"128"},{"size":585,"mtime":1609937850260,"results":"213","hashOfConfig":"128"},{"size":844,"mtime":1609845942103,"results":"214","hashOfConfig":"128"},{"size":201,"mtime":1609843139602,"results":"215","hashOfConfig":"128"},{"size":3460,"mtime":1610080640845,"results":"216","hashOfConfig":"128"},{"size":8793,"mtime":1610013474892,"results":"217","hashOfConfig":"128"},{"size":8457,"mtime":1610077836746,"results":"218","hashOfConfig":"128"},{"size":3785,"mtime":1609938007167,"results":"219","hashOfConfig":"128"},{"size":264,"mtime":1609938031748,"results":"220","hashOfConfig":"128"},{"size":13838,"mtime":1610013542757,"results":"221","hashOfConfig":"128"},{"size":6390,"mtime":1609938087022,"results":"222","hashOfConfig":"128"},{"size":169,"mtime":1609843458030,"results":"223","hashOfConfig":"128"},{"size":3555,"mtime":1609938094294,"results":"224","hashOfConfig":"128"},{"size":6275,"mtime":1610008939654,"results":"225","hashOfConfig":"128"},{"size":2572,"mtime":1609938105647,"results":"226","hashOfConfig":"128"},{"size":3610,"mtime":1610009328691,"results":"227","hashOfConfig":"128"},{"size":12666,"mtime":1610010117780,"results":"228","hashOfConfig":"128"},{"size":121,"mtime":1609495219446,"results":"229","hashOfConfig":"128"},{"size":656,"mtime":1610085010079,"results":"230","hashOfConfig":"128"},{"size":842,"mtime":1609846122142,"results":"231","hashOfConfig":"128"},{"size":965,"mtime":1609841760069,"results":"232","hashOfConfig":"128"},{"size":437,"mtime":1610010403341,"results":"233","hashOfConfig":"128"},{"size":4579,"mtime":1610001751554,"results":"234","hashOfConfig":"128"},{"size":618,"mtime":1609842003529,"results":"235","hashOfConfig":"128"},{"size":1734,"mtime":1609938328861,"results":"236","hashOfConfig":"128"},{"size":1172,"mtime":1609993600625,"results":"237","hashOfConfig":"128"},{"size":1155,"mtime":1609841852211,"results":"238","hashOfConfig":"128"},{"size":953,"mtime":1609494296036,"results":"239","hashOfConfig":"128"},{"size":528,"mtime":1609913462500,"results":"240","hashOfConfig":"128"},{"size":647,"mtime":1609494309974,"results":"241","hashOfConfig":"128"},{"size":1059,"mtime":1609841863902,"results":"242","hashOfConfig":"128"},{"size":812,"mtime":1609841867908,"results":"243","hashOfConfig":"128"},{"size":1400,"mtime":1609938062184,"results":"244","hashOfConfig":"128"},{"size":891,"mtime":1609937851925,"results":"245","hashOfConfig":"128"},{"size":422,"mtime":1609937852198,"results":"246","hashOfConfig":"128"},{"size":476,"mtime":1609494344681,"results":"247","hashOfConfig":"128"},{"size":234,"mtime":1609838308558,"results":"248","hashOfConfig":"128"},{"size":773,"mtime":1609938229355,"results":"249","hashOfConfig":"128"},{"size":8496,"mtime":1610077070032,"results":"250","hashOfConfig":"128"},{"size":798,"mtime":1609938253310,"results":"251","hashOfConfig":"128"},{"size":1139,"mtime":1610076931405,"results":"252","hashOfConfig":"128"},{"size":1511,"mtime":1610087090423,"results":"253","hashOfConfig":"128"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},"vrpkdh",{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"263"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"263"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"263"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"263"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"263"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"263"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"263"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"441","messages":"442","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"256"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"446","usedDeprecatedRules":"256"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453","usedDeprecatedRules":"256"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"256"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"465","messages":"466","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"256"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\index.js",[],["520","521"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\header.js",[],["522","523"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\isEmpty.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\LandingPage.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\reducerIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\appStateReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\getBlogByIdReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Reducer\\getAllBlogReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\actionIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\comment.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\changePassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\createBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\countryAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\contactUsAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\deleteBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\forgetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getAllBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getBlogById.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\getUserById.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\loginAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\registerAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\resetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\stateAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\updateProfileAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Store\\Store.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\rootReducer\\RootReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\State\\State.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\FormikControl.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Select.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Textarea.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Input.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Radio.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Checkbox.js",["524","525","526","527"],"import React from 'react'\r\nimport { Field, ErrorMessage } from 'formik'\r\nimport TextError from './TextError'\r\nimport { isEmpty } from '../../Services/isEmpty'\r\n\r\nfunction Checkbox(props) {\r\n    const { lable, name, options,data, ...rest } = props\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{lable}</label>\r\n            <div className=\"display\">\r\n                <Field name={name} {...rest} >\r\n                    {\r\n                        ({ field }) => {\r\n                            return options.map(item => {\r\n                                return (\r\n                                    <React.Fragment key={item.key}>\r\n                                        <div >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                id={item.value}\r\n                                                {...field}\r\n                                                value={item.value}\r\n                                                checked={ !isEmpty(field.value)  && field.value.includes(item.value) || !isEmpty(data) && data.includes(item.value)}\r\n                                            />\r\n                                            <label htmlFor={item.value}>&nbsp;{item.key}</label>\r\n                                        </div>\r\n                                    </React.Fragment>\r\n                                )\r\n                            })\r\n                        }\r\n                    }\r\n                </Field>\r\n            </div>\r\n            <p><ErrorMessage name={name} component={TextError} /></p>\r\n        </div>\r\n    )\r\n}\r\nexport default Checkbox","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Datepicker.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\States.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Map.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Country.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\TextError.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\HeaderAndSidebar.js",["528","529","530"],"import React, { useRef, useState } from 'react'\r\nimport { Layout, Menu } from 'antd';\r\nimport { Navbar, Nav, Button } from 'react-bootstrap'\r\nimport Popover from 'react-bootstrap/Popover'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nimport { SidebarData } from './SidebarData'\r\nimport { isEmpty } from '../../Services/isEmpty'\r\nimport profile1 from '../../Assets/Image/profileImage1.png'\r\nimport profile2 from '../../Assets/Image/profileImage2.png'\r\nimport profile3 from '../../Assets/Image/profileImage3.png'\r\n\r\nconst { Sider } = Layout;\r\n\r\nexport const HeaderAndSidebar = ({ children }, props) => {\r\n    const [state, setState] = useState(false)\r\n    const history = useHistory()\r\n    const logout = () => {\r\n        localStorage.clear()\r\n        history.push(\"/login\")\r\n    }\r\n\r\n    const [img, setImg] = useState({\r\n        profileImg: profile1\r\n    })\r\n\r\n    const imageHandler = (e) => {\r\n        const reader = new FileReader()\r\n        reader.onload = () => {\r\n            if (reader.readyState === 2) {\r\n                setImg({\r\n                    profileImg: reader.result\r\n                })\r\n            }\r\n        }\r\n        if (e.target.files[0]) {\r\n            reader.readAsDataURL(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Layout style={{ minHeight: '100vh' }} >\r\n            <Sider collapsible collapsed={state} onCollapse={() => { setState(!state) }} >\r\n                <Menu theme=\"dark\" s mode=\"inline\" >\r\n                    {\r\n                        !isEmpty(SidebarData()) &&\r\n                        SidebarData().map((item, index) => {\r\n                            return (\r\n                                <>\r\n                                    <Menu.Item key={index + 1} icon={item.icon} className=\"sidebar\" >\r\n                                        <Link to={item.path} >\r\n                                            <span>{item.title}</span>\r\n                                        </Link>\r\n                                    </Menu.Item>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                </Menu>\r\n            </Sider>\r\n            <Layout >\r\n                <Navbar bg=\"light\" className=\"sticky\">\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link><Link to=\"/dashbord\" >Home</Link></Nav.Link>\r\n                        </Nav>\r\n                        <div>\r\n                            <div class=\"container\">\r\n                                <>\r\n                                    <OverlayTrigger\r\n                                        trigger=\"click\"\r\n                                        key=\"left\"\r\n                                        placement=\"left\"\r\n                                        overlay={\r\n                                            <Popover id={`popover-positioned-left`}>\r\n                                                <Popover.Title as=\"h3\">{`Change Profile Picture`}</Popover.Title>\r\n                                                <Popover.Content>\r\n                                                    <img src={img.profileImg} class=\"img-circle\" alt=\"Avatar\" width=\"50\" height=\"50\" />\r\n                                                    <input type=\"file\" name=\"img\" onChange={(e) => { imageHandler(e) }} />\r\n                                                </Popover.Content>\r\n                                            </Popover>\r\n                                        }\r\n                                    >\r\n                                        <Button style={{ 'background': 'none', 'border': 'none', 'outline': 'none' }}><img src={img.profileImg} class=\"img-circle\" alt=\"Avatar\" width=\"50\" height=\"50\" /></Button>\r\n                                    </OverlayTrigger>\r\n                                </>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <Nav className=\"mr-auto\">\r\n                                <Nav.Link onClick={() => logout()}>Log Out</Nav.Link>\r\n                            </Nav>\r\n                        </div>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n                {children}\r\n            </Layout>\r\n        </Layout>\r\n    );\r\n}\r\nexport default HeaderAndSidebar","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\SidebarData.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Pages\\Slider.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Header\\Header.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\Footer\\Footer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\Routes.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\PrivateRouter.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes\\Auth.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\AllBlog.js",["531","532"],"import React, { useEffect } from 'react'\r\nimport { Card } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport { isEmpty } from '../../Services/isEmpty'\r\nimport { HeaderAndSidebar } from '../../Components/componentIndex';\r\nimport { getAllBlog, singleBlog } from '../../Action/actionIndex';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction AllBlog() {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getAllBlog())\r\n    }, [])\r\n\r\n    const Blog = useSelector(state => state.getAllBlog.Blogs.blogList)\r\n    const { Meta } = Card;\r\n\r\n    return (\r\n        <HeaderAndSidebar>\r\n            <div className=\"row allblog\">\r\n                {isEmpty(Blog) &&\r\n                    <div className=\"loader\">\r\n                        <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                    </div>\r\n                }\r\n                {\r\n                    !isEmpty(Blog) && Blog.map((item, i) => {\r\n                        return (\r\n                            <>\r\n                                <Card key={i}\r\n                                    className=\"blogimage\"\r\n                                    hoverable\r\n                                    style={{ width: 320 }}\r\n                                    cover={\r\n                                        <img\r\n                                            height=\"250px\"\r\n                                            alt=\"example\"\r\n                                            src={process.env.REACT_APP_API + \"/\" + item.blogImagePath}\r\n                                            onClick={() => {\r\n                                                localStorage.setItem('singleBlogId', item._id)\r\n                                                setTimeout(() => {\r\n                                                    history.push(\"/singleBlog\")\r\n                                                }, 1000);\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                >\r\n                                    <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                    \r\n                                </Card>\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </HeaderAndSidebar>\r\n    )\r\n}\r\n\r\nexport default AllBlog\r\n","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\Dashbord.js",["533"],"import React, { useEffect, useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Card } from 'antd';\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Loader from 'react-loader-spinner'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport { isEmpty } from '../../Services/isEmpty'\r\nimport deleteButton from '../../Assets/Image/delete.png'\r\nimport {HeaderAndSidebar,FormikControl} from '../../Components/componentIndex'\r\nimport { createBlog, deleteBlog, getBlogById, } from '../../Action/actionIndex';\r\n\r\nfunction Dashbord() {\r\n    const { Meta } = Card;\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const [selectedFile, setselectedFile] = useState()\r\n\r\n    useEffect(() => {\r\n        dispatch(getBlogById())\r\n    }, [])\r\n    const blogById = useSelector(state => state.getBlogById.blogById.blog)\r\n\r\n    const deleteBlogById = (deleteId) => {\r\n        dispatch(deleteBlog(deleteId))\r\n    }\r\n\r\n    const initialValues = {\r\n        blogTitle: '',\r\n        blogContent: '',\r\n        file: selectedFile\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        blogTitle: Yup.string().required('Blog Title Required*'),\r\n        blogContent: Yup.string().required('Blog Content Required*'),\r\n    })\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        let formData = new FormData();\r\n        formData.append('blogTitle', values.blogTitle);\r\n        formData.append('blogContent', values.blogContent);\r\n        formData.append('file', selectedFile);\r\n        \r\n        dispatch(createBlog(formData, onSubmitProps))\r\n        setTimeout(() => {\r\n            dispatch(getBlogById())\r\n            handleClose()\r\n        }, 2000);\r\n    }\r\n    const fileChangeHandler = (e) => {\r\n        setselectedFile(e.target.files[0])\r\n    } \r\n\r\n    return (\r\n        < div >\r\n            <HeaderAndSidebar title=\"dashbord\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12  blogbutton\">\r\n                        <Button className=\"blogbutton2\" variant=\"dark\" onClick={() => { handleShow() }}>Create Blog</Button >\r\n                    </div>\r\n                </div>\r\n                <div className=\"row allblog\">\r\n                    {isEmpty(blogById) &&\r\n                        <div className=\"loader\">\r\n                            <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                        </div>\r\n                    }\r\n                    {\r\n                        !isEmpty(blogById) &&\r\n                        blogById.map((item, i) => {\r\n                            return (\r\n                                <>\r\n                                    <Card className=\"blogcard\" key={i}\r\n                                        hoverable\r\n                                        style={{ width: 320 }}\r\n                                        cover={\r\n                                            <img\r\n                                                height=\"250px\"\r\n                                                alt=\"example\"\r\n                                                onClick={() => {\r\n                                                    localStorage.setItem('singleBlogId',item._id)\r\n                                                    setTimeout(() => {\r\n                                                        history.push(\"/singleBlog\")\r\n                                                    }, 1000);\r\n                                                }}\r\n\r\n                                                src={process.env.REACT_APP_API +\"/\"+item.blogImagePath}\r\n                                            />\r\n                                        }\r\n                                    >\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-8\">\r\n                                                <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                            </div>\r\n                                            <div className=\"col-4\">\r\n                                                <div className=\"row \">\r\n                                                    <div className=\"deleteButton\">\r\n                                                        <img src={deleteButton} alt=\"delete\" height=\"95%\" width=\"30%\" onClick={() => { deleteBlogById(item._id) }} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n                <Modal show={show} onHide={() => { handleClose() }} className=\"modal\">\r\n                    <Modal.Header closeButton style={{ \"outline\": \"none\" }}>\r\n                        <Modal.Title>Create Blog</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"loginpopup\">\r\n                            <div className=\"row\" style={{ \"justifyContent\": \"center\" }}>\r\n                                <div className=\"form col-6\" >\r\n                                    <Formik\r\n                                        initialValues={initialValues}\r\n                                        validationSchema={validationSchema}\r\n                                        onSubmit={onSubmit}\r\n                                    >\r\n                                        {\r\n                                            (formik) => {\r\n                                                return (\r\n                                                    <Form>\r\n                                                        <h1 align=\"center\">Create Blog</h1>\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"text\"\r\n                                                            lable=\"Blog Title*\"\r\n                                                            name=\"blogTitle\"\r\n                                                        />\r\n\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"text\"\r\n                                                            lable=\"Blog Content*\"\r\n                                                            name=\"blogContent\"\r\n                                                        />\r\n\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"file\"\r\n                                                            lable=\"Blog Image*\"\r\n                                                            name=\"file\"\r\n                                                            onChange = {(e) => fileChangeHandler(e)}\r\n                                                        />\r\n\r\n                                                        <div className=\"btndiv\">\r\n                                                            <Button className=\"button\" type=\"submit\" variant=\"info\" >Create</Button>\r\n                                                        </div>\r\n                                                    </Form>\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    </Formik>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </HeaderAndSidebar>\r\n        </div >\r\n    )\r\n}\r\nexport default Dashbord","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\ResetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\SingleBlog.js",["534"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\TableView.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PrivatePages\\UpdateProfile.js",["535","536"],"import React, { useEffect, useState } from 'react'\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nimport { HeaderAndSidebar, FormikControl } from '../../Components/componentIndex'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserById, getAllCountry, getAllstate, updateProfile } from '../../Action/actionIndex';\r\nimport * as Yup from \"yup\";\r\nimport { isEmpty } from '../../Services/isEmpty';\r\n\r\nfunction UpdateProfile() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserById())\r\n        dispatch(getAllCountry())\r\n        dispatch(getAllstate(!isEmpty(updateData) && updateData.country));\r\n    }, [])\r\n\r\n    const updateData = useSelector(state => state.initialState.getUserById.blogById && state.initialState.getUserById.blogById.data && state.initialState.getUserById.blogById.data[0])\r\n    console.log(updateData);\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    const option = [\r\n        { key: \"Select Course\", value: \"\" },\r\n        { key: \"BCA\", value: \"bca\" },\r\n        { key: \"BBA\", value: \"bba\" },\r\n        { key: \"BCOM\", value: \"bcom\" },\r\n    ];\r\n\r\n    const checkBoxOptions = [\r\n        { key: \"Cricket\", value: \"cricket\" },\r\n        { key: \"Reading\", value: \"reading\" },\r\n    ];\r\n\r\n    const initialValues = {\r\n        name:!isEmpty(updateData) && updateData.name,\r\n        phoneNo:!isEmpty(updateData) && updateData.phoneNo,\r\n        pinCode: !isEmpty(updateData) &&updateData.pinCode,\r\n        email:!isEmpty(updateData) && updateData.email,\r\n        course:!isEmpty(updateData) && updateData.course,\r\n        city:!isEmpty(updateData) && updateData.city,\r\n        state: !isEmpty(updateData) &&updateData.state,\r\n        country:!isEmpty(updateData) && updateData.country,\r\n        address:!isEmpty(updateData) && updateData.address,\r\n        skill:!isEmpty(updateData) && updateData.skill,\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        phoneNo: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"PhoneNo required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        dispatch(updateProfile(values, onSubmitProps))\r\n        setTimeout(() => {\r\n            dispatch(getUserById())\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <HeaderAndSidebar title=\"update\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12  blogbutton\">\r\n                        <Button className=\"blogbutton2\" variant=\"dark\"><Link to=\"/changePassword\">Change Password</Link></Button >\r\n                    </div>\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Card className=\"card\">\r\n                        <Card.Body className=\"cardbody\">\r\n                            {\r\n                                !isEmpty(updateData) &&\r\n                                <Formik\r\n                                    initialValues={initialValues}\r\n                                    validationSchema={validationSchema}\r\n                                    onSubmit={onSubmit}\r\n                                    enableReinitialize\r\n                                >\r\n                                    {(formik) => {\r\n                                        return (\r\n\r\n                                            <Form className=\"formUpdate\">\r\n                                                <div >\r\n                                                    <h1 align=\"center\">Update Profile</h1>\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Name*\"\r\n                                                        name=\"name\"\r\n                                                        value={formik.values.name}\r\n                                                        onChange={formik.handleChange}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                        value={formik.values.email}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"PhoneNo*\"\r\n                                                        name=\"phoneNo\"\r\n                                                        value={formik.values.phoneNo}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"select\"\r\n                                                        lable=\"Select Course*\"\r\n                                                        name=\"course\"\r\n                                                        option={option}\r\n                                                        value={formik.values.course}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"country\"\r\n                                                        lable=\"Select Country*\"\r\n                                                        name=\"country\"\r\n                                                        option={CountryData}\r\n                                                        validate={validateCountry}\r\n                                                        value={formik.values.country}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"state\"\r\n                                                        lable=\"Select State*\"\r\n                                                        name=\"state\"\r\n                                                        option={StatesData}\r\n                                                        validate={validateState}\r\n                                                        value={formik.values.state}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"City*\"\r\n                                                        name=\"city\"\r\n                                                        value={formik.values.city}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"checkbox\"\r\n                                                        lable=\"Skill*\"\r\n                                                        name=\"skill\"\r\n                                                        validate={validateSkills}\r\n                                                        options={checkBoxOptions}\r\n                                                        data={formik.values.skill}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Pincode*\"\r\n                                                        name=\"pinCode\"\r\n                                                        value={formik.values.pinCode}\r\n                                                    />\r\n\r\n                                                    <FormikControl\r\n                                                        control=\"textarea\"\r\n                                                        lable=\"Address*\"\r\n                                                        name=\"address\"\r\n                                                        value={formik.values.address}\r\n                                                    />\r\n                                                    <div className=\"text-center\">\r\n                                                        <Button\r\n                                                            className=\"button\"\r\n                                                            type=\"submit\"\r\n                                                            variant=\"success\"\r\n                                                            disabled={!formik.isValid}\r\n                                                        >\r\n                                                            Update\r\n                                                 </Button>\r\n                                                        <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                            Reset\r\n                                            </Button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Form>\r\n                                        );\r\n                                    }}\r\n                                </Formik>\r\n                            }\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </HeaderAndSidebar>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateProfile","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Contact.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Error404.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\ForgetToNew.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Forgot.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Home.js",["537"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card } from 'antd';\r\nimport { Formik, Form } from 'formik'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport * as Yup from 'yup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport { isEmpty } from '../../Services/isEmpty'\r\nimport { isAuthenticated } from '../../Routes/Auth'\r\nimport {Header,FormikControl, Slider} from '../../Components/componentIndex'\r\nimport { getAllBlog ,userGoingForLogin} from '../../Action/actionIndex'\r\nimport Like from '../../Assets/Image/likeImage.png'\r\nimport disLike from '../../Assets/Image/dislike.png'\r\nimport comment from '../../Assets/Image/comment.png'\r\n\r\n\r\nfunction Home(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n\r\n    const { Meta } = Card;\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const Blog = useSelector(state => state.getAllBlog.Blogs.blogList)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllBlog())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid Format*').required('Email Required*'),\r\n        password: Yup.string().length(6).required('Password Required*')\r\n    })\r\n\r\n    const onSubmit = values => dispatch(userGoingForLogin(values, props))\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Slider />\r\n            <div className=\"row allblog\">\r\n                {isEmpty(Blog) &&\r\n                    <div className=\"loader\">\r\n                        <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                    </div>\r\n                }\r\n                {\r\n                    !isEmpty(Blog) && Blog.map((item, i) => {\r\n                        return (\r\n                            <>\r\n                                <Card key={i}\r\n                                    className=\"blogimage\"\r\n                                    hoverable\r\n                                    style={{ width: 300 }}\r\n                                    cover={<img alt=\"example\" src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" />}\r\n                                >\r\n                                    <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                    <div className=\"row social\">\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={Like} alt=\"like\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={disLike} alt=\"dislike\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={comment} alt=\"comment\" height=\"100%\" width=\"100%\" /></button>\r\n                                    </div>\r\n                                </Card>\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <Modal show={show} onHide={() => { handleClose() }} className=\"modal\">\r\n                <Modal.Header closeButton  style={{\"outline\": \"none\"}}>\r\n                    <Modal.Title>Sign In</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"loginpopup\">\r\n                        <div className=\"row\" style={{ \"justifyContent\": \"center\" }}>\r\n                            <div className=\"form col-6\" >\r\n                                <Formik\r\n                                    initialValues={initialValues}\r\n                                    validationSchema={validationSchema}\r\n                                    onSubmit={onSubmit}\r\n                                >\r\n                                    {\r\n                                        (formik) => {\r\n                                            return (\r\n                                                <Form>\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <div className=\"btndiv\">\r\n                                                        <Button className=\"button\" type=\"submit\" variant=\"info\">Login</Button>\r\n                                                        <Button className=\"button\" variant=\"info\" onClick={() => { history.push(`/register`); }}>Register</Button >\r\n                                                    </div>\r\n                                                    <div className=\"forgot\"><Link to=\"forgot\">Forgot password?</Link></div>\r\n                                                </Form>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                </Formik>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\Login.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\PublicPages\\RegisterPage.js",["538"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Recaptcha from \"react-google-recaptcha\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {Header,FormikControl} from '../../Components/componentIndex'\r\nimport { isAuthenticated } from '../../Routes/Auth'\r\nimport { userGoingForRegister, getAllCountry, getAllstate } from \"../../Action/actionIndex\";\r\nimport { isEmpty } from \"../../Services/isEmpty\";\r\n\r\nconst option = [\r\n    { key: \"Select Course\", value: \"\" },\r\n    { key: \"BCA\", value: \"bca\" },\r\n    { key: \"BBA\", value: \"bba\" },\r\n    { key: \"BCOM\", value: \"bcom\" },\r\n];\r\nconst checkBoxOptions = [\r\n    { key: \"Cricket\", value: \"cricket\" },\r\n    { key: \"Reading\", value: \"reading\" },\r\n];\r\n\r\nfunction Register(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n    const dispatch = useDispatch();\r\n    const [captcha, setCaptcha] = useState(\"\");\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCountry())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        phoneNo: \"\",\r\n        pinCode: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        course: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        country: \"\",\r\n        address: \"\",\r\n        skill: [],\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        password: Yup.string().length(6).required(\"Password required *\"),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\")], \"password miss match*\")\r\n            .required(\"ConfimPassword required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const phoneValidate = (phone) => {\r\n        isNaN(phone)\r\n        let error;\r\n        if (isEmpty(phone)) {\r\n            error = \"phoneNo required!\"\r\n        }\r\n        else if (phone.length !== 10) {\r\n            error = \"phoneNo length must be 10\"\r\n        }\r\n        if (isNaN(phone) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n    const pinValidate = (pin) => {\r\n        isNaN(pin)\r\n        let error;\r\n        if (isEmpty(pin)) {\r\n            error = \"pinNo required!\"\r\n        }\r\n        else if (pin.length !== 6) {\r\n            error = \"pinNo length must be 6\"\r\n        }\r\n        if (isNaN(pin) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n\r\n    const onSubmit = (values) => dispatch(userGoingForRegister(values, props));\r\n    const handlecaptcha = (e) => setCaptcha(e);\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <ToastContainer />\r\n            <Card className=\"card\">\r\n                <Card.Body className=\"cardbody\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form col-8\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                {(formik) => {\r\n                                    return (\r\n                                        <Form>\r\n                                            <h1 align=\"center\">Sign Up</h1>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Name*\"\r\n                                                        name=\"name\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"PhoneNo*\"\r\n                                                        name=\"phoneNo\"\r\n                                                        validate={phoneValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"select\"\r\n                                                        lable=\"Select Course*\"\r\n                                                        name=\"course\"\r\n                                                        option={option}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"country\"\r\n                                                        lable=\"Select Country*\"\r\n                                                        name=\"country\"\r\n                                                        option={CountryData}\r\n                                                        validate={validateCountry}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"state\"\r\n                                                        lable=\"Select State*\"\r\n                                                        name=\"state\"\r\n                                                        option={StatesData}\r\n                                                        validate={validateState}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"City*\"\r\n                                                        name=\"city\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"checkbox\"\r\n                                                        lable=\"Skill*\"\r\n                                                        name=\"skill\"\r\n                                                        validate={validateSkills}\r\n                                                        options={checkBoxOptions}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Pincode*\"\r\n                                                        name=\"pinCode\"\r\n                                                        validate={pinValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Confirm Password*\"\r\n                                                        name=\"confirmPassword\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"textarea\"\r\n                                                        lable=\"Address*\"\r\n                                                        name=\"address\"\r\n                                                    />\r\n                                                    <label htmlFor=\"captcha\">Captcha</label>\r\n                                                    <Recaptcha\r\n                                                        sitekey=\"6Lf-RwsaAAAAAP42dLJgYMQ8K6oK4xmrFG_NUSWP\"\r\n                                                        render=\"explicit\"\r\n                                                        onChange={(e) => {\r\n                                                            handlecaptcha(e);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"text-center\">\r\n                                                <Button\r\n                                                    className=\"button\"\r\n                                                    type=\"submit\"\r\n                                                    variant=\"success\"\r\n                                                    disabled={!formik.isValid || captcha === \"\"}\r\n                                                >\r\n                                                    Submit\r\n                                                 </Button>\r\n                                                <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                    Reset\r\n                                            </Button>\r\n                                            </div>\r\n                                        </Form>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                        </div>\r\n                        <div className=\"image col-4\">\r\n                            <img\r\n                                src=\"https://i.pinimg.com/originals/f1/a3/c0/f1a3c03479f4437eb83d26eb1f13ae71.png\"\r\n                                height=\"80%\"\r\n                                width=\"85%\"\r\n                                alt=\"Login With Social Media\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default Register","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Components\\componentIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Screen\\screenIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\likeApi.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Action\\disLikeApi.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\actionIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\changePassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\comment.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\contactUsAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\countryAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\createBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\deleteBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getUserById.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\loginAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\registerAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\resetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\stateAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\updateProfileAction.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getAllBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\getBlogById.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\forgetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\likeApi.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\disLikeApi.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\store\\Store.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\Routes.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\PrivateRouter.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\screenIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\routes\\Auth.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\AllBlog.js",["539"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\Dashbord.js",["540","541"],"import React, { useEffect, useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Card } from 'antd';\r\nimport { Formik, Form } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport Loader from 'react-loader-spinner'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport { isEmpty } from '../../services/isEmpty'\r\nimport deleteButton from '../../assets/Image/delete.png'\r\nimport { HeaderAndSidebar, FormikControl } from '../../components/componentIndex'\r\nimport { createBlog, deleteBlog, getBlogById, } from '../../action/actionIndex';\r\n\r\nfunction Dashbord() {\r\n    const { Meta } = Card;\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const [selectedFile, setselectedFile] = useState()\r\n\r\n    const blogById = useSelector(state => state.getBlogById.blogById.blog)\r\n    \r\n    const deleteBlogById = (deleteId) => {\r\n        dispatch(deleteBlog(deleteId))\r\n    }\r\n    const [img, setImg] = useState()\r\n    \r\n    const initialValues = {\r\n        blogTitle: '',\r\n        blogContent: '',\r\n        file: selectedFile\r\n    }\r\n    \r\n    const validationSchema = Yup.object({\r\n        blogTitle: Yup.string().required('Blog Title Required*'),\r\n        blogContent: Yup.string().required('Blog Content Required*'),\r\n    })\r\n    \r\n    useEffect(() => {\r\n        dispatch(getBlogById())\r\n    }, [])\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        let formData = new FormData();\r\n        formData.append('blogTitle', values.blogTitle);\r\n        formData.append('blogContent', values.blogContent);\r\n        formData.append('file', selectedFile);\r\n\r\n        dispatch(createBlog(formData, onSubmitProps))\r\n        handleClose()\r\n        setTimeout(() => {\r\n            dispatch(getBlogById())\r\n        }, 2000);\r\n    }\r\n    const fileChangeHandler = (e) => {\r\n        setselectedFile(e.target.files[0])\r\n        const reader = new FileReader()\r\n        reader.onload = () => {\r\n            if (reader.readyState === 2) {\r\n                setImg(reader.result)\r\n            }\r\n        }\r\n        if (e.target.files[0]) {\r\n            reader.readAsDataURL(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        < div >\r\n            <HeaderAndSidebar title=\"dashbord\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12  blogbutton\">\r\n                        <Button className=\"blogbutton2\" variant=\"dark\" onClick={() => { handleShow() }}>Create Blog</Button >\r\n                    </div>\r\n                </div>\r\n                <div className=\"row allblog\">\r\n                    {isEmpty(blogById) &&\r\n                        <div className=\"loader\">\r\n                            <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                        </div>\r\n                    }\r\n                    {\r\n                        !isEmpty(blogById) &&\r\n                        blogById.map((item, i) => {\r\n                            return (\r\n                                <>\r\n                                    <Card className=\"blogcard\" key={i}\r\n                                        hoverable\r\n                                        style={{ width: 320 }}\r\n                                        cover={\r\n                                            <img\r\n                                                height=\"250px\"\r\n                                                alt=\"example\"\r\n                                                onClick={() => {\r\n                                                    localStorage.setItem('singleBlogId', item._id)\r\n                                                    setTimeout(() => {\r\n                                                        history.push(\"/singleBlog\")\r\n                                                    }, 1000);\r\n                                                }}\r\n\r\n                                                src={process.env.REACT_APP_API + \"/\" + item.blogImagePath}\r\n                                            />\r\n                                        }\r\n                                    >\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-8\">\r\n                                                <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                            </div>\r\n                                            <div className=\"col-4\">\r\n                                                <div className=\"row \">\r\n                                                    <div className=\"deleteButton\">\r\n                                                        <img src={deleteButton} alt=\"delete\" height=\"95%\" width=\"30%\" onClick={() => { deleteBlogById(item._id) }} />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Card>\r\n                                </>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n\r\n\r\n                <Modal show={show} onHide={() => { handleClose() }} className=\"modal\">\r\n                    <Modal.Header closeButton style={{ \"outline\": \"none\" }}>\r\n                        <Modal.Title>Create Blog</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"loginpopup\">\r\n                            <div className=\"row\" style={{ \"justifyContent\": \"center\" }}>\r\n                                <div className=\"form col-6\" >\r\n                                    <Formik\r\n                                        initialValues={initialValues}\r\n                                        validationSchema={validationSchema}\r\n                                        onSubmit={onSubmit}\r\n                                    >\r\n                                        {\r\n                                            (formik) => {\r\n                                                return (\r\n                                                    <Form>\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"text\"\r\n                                                            lable=\"Blog Title*\"\r\n                                                            name=\"blogTitle\"\r\n                                                        />\r\n\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"text\"\r\n                                                            lable=\"Blog Content*\"\r\n                                                            name=\"blogContent\"\r\n                                                        />\r\n\r\n                                                        <FormikControl\r\n                                                            control=\"input\"\r\n                                                            type=\"file\"\r\n                                                            lable=\"Blog Image*\"\r\n                                                            name=\"file\"\r\n                                                            onChange={(e) => fileChangeHandler(e)}\r\n                                                        />\r\n\r\n                                                        {img && <img src={img} width=\"100\" height=\"100\" />}\r\n\r\n                                                        <div className=\"btndiv\">\r\n                                                            <Button className=\"button\" type=\"submit\" variant=\"info\" >Create</Button>\r\n                                                        </div>\r\n                                                    </Form>\r\n                                                )\r\n                                            }\r\n                                        }\r\n                                    </Formik>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </HeaderAndSidebar>\r\n        </div >\r\n    )\r\n}\r\nexport default Dashbord","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\SingleBlog.js",["542"],"import React, { useEffect, useState } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\nimport { Formik, Form } from 'formik'\r\nimport { Link } from 'react-router-dom';\r\nimport { Card } from 'antd';\r\nimport Loader from 'react-loader-spinner'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { HeaderAndSidebar, FormikControl } from '../../components/componentIndex'\r\nimport { isEmpty } from '../../services/isEmpty'\r\nimport { blogDisLike, blogLike, comment, getAllBlog } from '../../action/actionIndex';\r\nimport Like from '../../assets/Image/likeImage.png'\r\nimport LikeIcon from '../../assets/Image/likeImageIcon.jpg'\r\nimport disLike from '../../assets/Image/dislike.png'\r\nimport disLikeIcon from '../../assets/Image/dislikeIcon.png'\r\nimport commentImage from '../../assets/Image/comment.png'\r\n\r\nfunction SingleBlog(props) {\r\n    const { Meta } = Card;\r\n    const singleBlogId = localStorage.getItem('singleBlogId')\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(getAllBlog())\r\n    }, [])\r\n    \r\n    const getAllBlogs = useSelector(state => state.getAllBlog.Blogs.blogList)\r\n    const singleDataBlog = getAllBlogs && getAllBlogs.filter(item => item._id === singleBlogId)\r\n    const loginDataFromApi = JSON.parse(localStorage.getItem('loginData'))\r\n    const loginData = loginDataFromApi.data\r\n    const LikedBlog = singleDataBlog && singleDataBlog[0].blogLike.includes(loginData[0]._id)\r\n    const DisLikedBlog = singleDataBlog && singleDataBlog[0].blogDislike.includes(loginData[0]._id)\r\n\r\n    const initialValues = {\r\n        blogComment: []\r\n    }\r\n\r\n    const [commentStatus, setCommentStatus] = useState(false)\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        dispatch(comment(values, singleDataBlog[0]._id, onSubmitProps))\r\n        setTimeout(() => {\r\n            dispatch(getAllBlog())\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <HeaderAndSidebar title=\"dashbord\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12  blogbutton\">\r\n                    <Button className=\"blogbutton2\" variant=\"dark\"><Link to=\"/dashbord\"> Back To Blog</Link></Button >\r\n                </div>\r\n            </div>\r\n            <div className=\"singleBlog1\">\r\n\r\n                {isEmpty(singleDataBlog) &&\r\n                    <div className=\"loader\">\r\n                        <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                    </div>\r\n                }\r\n                {!isEmpty(singleDataBlog) && !isEmpty(singleDataBlog[0]) &&\r\n                    <Card className=\"singleBlog2\"\r\n                        hoverable\r\n                        style={{ width: 280 }}\r\n                        cover={\r\n                            <img\r\n                                height=\"400px\"\r\n                                alt=\"example\"\r\n                                src={process.env.REACT_APP_API + \"/\" + singleDataBlog[0].blogImagePath}\r\n                            />\r\n                        }\r\n                    >\r\n                        <div className=\"row\">\r\n                            <Meta title={singleDataBlog[0].blogTitle} description={singleDataBlog[0].blogContent} />\r\n                        </div>\r\n                        <div>\r\n                            <img\r\n                                hoverable\r\n                                onClick={() => {\r\n                                    dispatch(blogLike(singleDataBlog[0]._id, props))\r\n                                    setTimeout(() => {\r\n                                        dispatch(getAllBlog())\r\n                                    }, 1000);\r\n\r\n                                }}\r\n                                src={LikedBlog ? LikeIcon : Like}\r\n                                alt=\"like\"\r\n                                height={LikedBlog ? \"10%\" : \"10%\"}\r\n                                width={LikedBlog ? \"10%\" : \"10%\"}\r\n                            />\r\n                            {singleDataBlog[0].blogLike && singleDataBlog[0].blogLike.length}\r\n                            <img\r\n                                hoverable\r\n                                onClick={() => {\r\n                                    dispatch(blogDisLike(singleDataBlog[0]._id, props))\r\n                                    setTimeout(() => {\r\n                                        dispatch(getAllBlog())\r\n                                    }, 1000);\r\n                                }}\r\n                                src={DisLikedBlog ? disLikeIcon : disLike}\r\n                                alt=\"dislike\"\r\n                                height={DisLikedBlog ? \"10%\" : \"10%\"}\r\n                                width={DisLikedBlog ? \"10%\" : \"10%\"}\r\n                            />\r\n                            {singleDataBlog[0].blogDislike && singleDataBlog[0].blogDislike.length}\r\n                            <img\r\n                                hoverable\r\n                                onClick={\r\n                                    () => setCommentStatus(!commentStatus)\r\n                                }\r\n                                src={commentImage}\r\n                                alt=\"comment\"\r\n                                height=\"10%\"\r\n                                width=\"10%\"\r\n                            />\r\n                            {singleDataBlog[0].blogComment && singleDataBlog[0].blogComment.length}\r\n                        </div>\r\n\r\n                        {\r\n                            commentStatus === true &&\r\n                            <div>\r\n                                <Formik\r\n                                    initialValues={initialValues}\r\n                                    onSubmit={onSubmit}\r\n                                >\r\n                                    {\r\n                                        (formik) => {\r\n                                            return (\r\n                                                <Form>\r\n\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"col-9\">\r\n                                                            <FormikControl className=\"inputComment\"\r\n                                                                control=\"input\"\r\n                                                                type=\"text\"\r\n                                                                lable=\"Comment\"\r\n                                                                name=\"blogComment\"\r\n                                                            />\r\n                                                        </div>\r\n                                                        <div className=\"col-3 btndiv\">\r\n                                                            <Button className=\"button\" type=\"submit\" variant=\"info\">Comment</Button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Form>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                </Formik>\r\n                            </div>\r\n                        }\r\n                        <hr />\r\n                        <div className=\"row commentLable\">\r\n                            <h4>Comments</h4>\r\n                        </div>\r\n                        <div>\r\n                            {\r\n                                !isEmpty(singleDataBlog[0].blogComment) && \r\n                                <div style={{ overflowY: 'scroll', height: 'calc(15vh - 20px)' }}>\r\n                                    {\r\n                                        !isEmpty(singleDataBlog[0].blogComment) && singleDataBlog[0].blogComment.map((item, i) => {\r\n                                            return <>\r\n                                                <h5>{item}</h5>\r\n                                                <hr />\r\n                                            </>\r\n                                        })\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </Card >\r\n                }\r\n            </div >\r\n        </HeaderAndSidebar >\r\n    )\r\n}\r\n\r\nexport default SingleBlog","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\ResetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\TableView.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PrivatePages\\UpdateProfile.js",["543"],"import React, { useEffect } from 'react'\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nimport { HeaderAndSidebar, FormikControl } from '../../components/componentIndex'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserById, getAllCountry, getAllstate, updateProfile } from '../../action/actionIndex';\r\nimport * as Yup from \"yup\";\r\nimport { isEmpty } from '../../services/isEmpty';\r\n\r\nfunction UpdateProfile() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserById())\r\n        dispatch(getAllCountry())\r\n        dispatch(getAllstate(!isEmpty(updateData) && updateData.country));\r\n    }, [])\r\n\r\n    const updateData = useSelector(state => state.initialState.getUserById.blogById && state.initialState.getUserById.blogById.data && state.initialState.getUserById.blogById.data[0])\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    const option = [\r\n        { key: \"Select Course\", value: \"\" },\r\n        { key: \"BCA\", value: \"bca\" },\r\n        { key: \"BBA\", value: \"bba\" },\r\n        { key: \"BCOM\", value: \"bcom\" },\r\n    ];\r\n\r\n    const checkBoxOptions = [\r\n        { key: \"Cricket\", value: \"cricket\" },\r\n        { key: \"Reading\", value: \"reading\" },\r\n    ];\r\n\r\n    const initialValues = {\r\n        name: !isEmpty(updateData) && updateData.name,\r\n        phoneNo: !isEmpty(updateData) && updateData.phoneNo,\r\n        pinCode: !isEmpty(updateData) && updateData.pinCode,\r\n        email: !isEmpty(updateData) && updateData.email,\r\n        course: !isEmpty(updateData) && updateData.course,\r\n        city: !isEmpty(updateData) && updateData.city,\r\n        state: !isEmpty(updateData) && updateData.state,\r\n        country: !isEmpty(updateData) && updateData.country,\r\n        address: !isEmpty(updateData) && updateData.address,\r\n        skill: !isEmpty(updateData) && updateData.skill,\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        phoneNo: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"PhoneNo required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n\r\n    const onSubmit = (values, onSubmitProps) => {\r\n        dispatch(updateProfile(values, onSubmitProps))\r\n        setTimeout(() => {\r\n            dispatch(getUserById())\r\n        }, 1000);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <HeaderAndSidebar title=\"update\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12  blogbutton\">\r\n                        <Button className=\"blogbutton2\" variant=\"dark\"><Link to=\"/changePassword\">Change Password</Link></Button >\r\n                    </div>\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Card className=\"card\">\r\n                        <Card.Body className=\"cardbody\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-12\">\r\n                                    <h1 align=\"center\">Update Profile</h1>\r\n                                    {\r\n                                        !isEmpty(updateData) &&\r\n                                        <Formik\r\n                                            initialValues={initialValues}\r\n                                            validationSchema={validationSchema}\r\n                                            onSubmit={onSubmit}\r\n                                            enableReinitialize\r\n                                        >\r\n                                            {(formik) => {\r\n                                                return (\r\n\r\n                                                    <Form className=\"formUpdate\">\r\n                                                        <div className=\"row\">\r\n                                                            <div className=\"row\">\r\n                                                                <div className=\"col-6\">\r\n                                                                    <FormikControl\r\n                                                                        control=\"input\"\r\n                                                                        type=\"text\"\r\n                                                                        lable=\"Name*\"\r\n                                                                        name=\"name\"\r\n                                                                        value={formik.values.name}\r\n                                                                        onChange={formik.handleChange}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"input\"\r\n                                                                        type=\"email\"\r\n                                                                        lable=\"Email*\"\r\n                                                                        name=\"email\"\r\n                                                                        value={formik.values.email}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"input\"\r\n                                                                        type=\"text\"\r\n                                                                        lable=\"PhoneNo*\"\r\n                                                                        name=\"phoneNo\"\r\n                                                                        value={formik.values.phoneNo}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"select\"\r\n                                                                        lable=\"Select Course*\"\r\n                                                                        name=\"course\"\r\n                                                                        option={option}\r\n                                                                        value={formik.values.course}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"country\"\r\n                                                                        lable=\"Select Country*\"\r\n                                                                        name=\"country\"\r\n                                                                        option={CountryData}\r\n                                                                        validate={validateCountry}\r\n                                                                        value={formik.values.country}\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div className=\"col-6\">\r\n                                                                    <FormikControl\r\n                                                                        control=\"state\"\r\n                                                                        lable=\"Select State*\"\r\n                                                                        name=\"state\"\r\n                                                                        option={StatesData}\r\n                                                                        validate={validateState}\r\n                                                                        value={formik.values.state}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"input\"\r\n                                                                        type=\"text\"\r\n                                                                        lable=\"City*\"\r\n                                                                        name=\"city\"\r\n                                                                        value={formik.values.city}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"checkbox\"\r\n                                                                        lable=\"Skill*\"\r\n                                                                        name=\"skill\"\r\n                                                                        validate={validateSkills}\r\n                                                                        options={checkBoxOptions}\r\n                                                                        data={formik.values.skill}\r\n                                                                    />\r\n                                                                    <FormikControl\r\n                                                                        control=\"input\"\r\n                                                                        type=\"text\"\r\n                                                                        lable=\"Pincode*\"\r\n                                                                        name=\"pinCode\"\r\n                                                                        value={formik.values.pinCode}\r\n                                                                    />\r\n\r\n                                                                    <FormikControl\r\n                                                                        control=\"textarea\"\r\n                                                                        lable=\"Address*\"\r\n                                                                        name=\"address\"\r\n                                                                        value={formik.values.address}\r\n                                                                    />\r\n                                                                </div>\r\n                                                                <div className=\"row\" style={{ 'width': '100%' }}>\r\n                                                                    <div className=\"col-12\" align=\"center\" >\r\n                                                                        <Button\r\n                                                                            className=\"button\"\r\n                                                                            type=\"submit\"\r\n                                                                            variant=\"success\"\r\n                                                                            disabled={!formik.isValid}\r\n                                                                        >\r\n                                                                            Update\r\n                                                                        </Button>\r\n                                                                        {/* <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                                            Reset\r\n                                                                        </Button> */}\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Form>\r\n                                                );\r\n                                            }}\r\n                                        </Formik>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </HeaderAndSidebar>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateProfile","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Contact.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Error404.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\ForgetToNew.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Home.js",["544"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card } from 'antd';\r\nimport { Formik, Form } from 'formik'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport * as Yup from 'yup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport { isEmpty } from '../../services/isEmpty'\r\nimport { isAuthenticated } from '../../routes/Auth'\r\nimport {Header,FormikControl, Slider} from '../../components/componentIndex'\r\nimport { getAllBlog ,userGoingForLogin} from '../../action/actionIndex'\r\nimport Like from '../../assets/Image/likeImage.png'\r\nimport disLike from '../../assets/Image/dislike.png'\r\nimport comment from '../../assets/Image/comment.png'\r\n\r\n\r\nfunction Home(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n\r\n    const { Meta } = Card;\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const Blog = useSelector(state => state.getAllBlog.Blogs.blogList)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllBlog())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid Format*').required('Email Required*'),\r\n        password: Yup.string().length(6).required('Password Required*')\r\n    })\r\n\r\n    const onSubmit = values => dispatch(userGoingForLogin(values, props))\r\n    return (\r\n        <div >\r\n            <Header />\r\n            <Slider />\r\n            <div className=\"row allblog\">\r\n                {isEmpty(Blog) &&\r\n                    <div className=\"loader\">\r\n                        <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                    </div>\r\n                }\r\n                {\r\n                    !isEmpty(Blog) && Blog.map((item, i) => {\r\n                        return (\r\n                            <>\r\n                                <Card key={i}\r\n                                    className=\"blogimage\"\r\n                                    hoverable\r\n                                    style={{ width: 300 }}\r\n                                    cover={<img alt=\"example\" height=\"250px\" src={process.env.REACT_APP_API + \"/\" + item.blogImagePath} />}\r\n                                >\r\n                                    <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                    <div className=\"row social\">\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={Like} alt=\"like\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={disLike} alt=\"dislike\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={comment} alt=\"comment\" height=\"100%\" width=\"100%\" /></button>\r\n                                    </div>\r\n                                </Card>\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <Modal show={show} onHide={() => { handleClose() }} className=\"modal\">\r\n                <Modal.Header closeButton  style={{\"outline\": \"none\"}}>\r\n                    <Modal.Title>Sign In</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"loginpopup\">\r\n                        <div className=\"row\" style={{ \"justifyContent\": \"center\" }}>\r\n                            <div className=\"form col-6\" >\r\n                                <Formik\r\n                                    initialValues={initialValues}\r\n                                    validationSchema={validationSchema}\r\n                                    onSubmit={onSubmit}\r\n                                >\r\n                                    {\r\n                                        (formik) => {\r\n                                            return (\r\n                                                <Form>\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <div className=\"btndiv\">\r\n                                                        <Button className=\"button\" type=\"submit\" variant=\"info\">Login</Button>\r\n                                                        <Button className=\"button\" variant=\"info\" onClick={() => { history.push(`/register`); }}>Register</Button >\r\n                                                    </div>\r\n                                                    <div className=\"forgot\"><Link to=\"forgot\">Forgot password?</Link></div>\r\n                                                </Form>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                </Formik>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Forgot.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\Login.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\screen\\PublicPages\\RegisterPage.js",["545"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Recaptcha from \"react-google-recaptcha\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {Header,FormikControl} from '../../components/componentIndex'\r\nimport { isAuthenticated } from '../../routes/Auth'\r\nimport { userGoingForRegister, getAllCountry, getAllstate } from \"../../action/actionIndex\";\r\nimport { isEmpty } from \"../../services/isEmpty\";\r\n\r\nconst option = [\r\n    { key: \"Select Course\", value: \"\" },\r\n    { key: \"BCA\", value: \"bca\" },\r\n    { key: \"BBA\", value: \"bba\" },\r\n    { key: \"BCOM\", value: \"bcom\" },\r\n];\r\nconst checkBoxOptions = [\r\n    { key: \"Cricket\", value: \"cricket\" },\r\n    { key: \"Reading\", value: \"reading\" },\r\n];\r\n\r\nfunction Register(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n    const dispatch = useDispatch();\r\n    const [captcha, setCaptcha] = useState(\"\");\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCountry())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        phoneNo: \"\",\r\n        pinCode: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        course: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        country: \"\",\r\n        address: \"\",\r\n        skill: [],\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        password: Yup.string().length(6).required(\"Password required *\"),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\")], \"password miss match*\")\r\n            .required(\"ConfimPassword required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const phoneValidate = (phone) => {\r\n        isNaN(phone)\r\n        let error;\r\n        if (isEmpty(phone)) {\r\n            error = \"phoneNo required!\"\r\n        }\r\n        else if (phone.length !== 10) {\r\n            error = \"phoneNo length must be 10\"\r\n        }\r\n        if (isNaN(phone) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n    const pinValidate = (pin) => {\r\n        isNaN(pin)\r\n        let error;\r\n        if (isEmpty(pin)) {\r\n            error = \"pinNo required!\"\r\n        }\r\n        else if (pin.length !== 6) {\r\n            error = \"pinNo length must be 6\"\r\n        }\r\n        if (isNaN(pin) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n\r\n    const onSubmit = (values) => dispatch(userGoingForRegister(values, props));\r\n    const handlecaptcha = (e) => setCaptcha(e);\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <ToastContainer />\r\n            <Card className=\"card\">\r\n                <Card.Body className=\"cardbody\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form col-8\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                {(formik) => {\r\n                                    return (\r\n                                        <Form>\r\n                                            <h1 align=\"center\">Sign Up</h1>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Name*\"\r\n                                                        name=\"name\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"PhoneNo*\"\r\n                                                        name=\"phoneNo\"\r\n                                                        validate={phoneValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"select\"\r\n                                                        lable=\"Select Course*\"\r\n                                                        name=\"course\"\r\n                                                        option={option}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"country\"\r\n                                                        lable=\"Select Country*\"\r\n                                                        name=\"country\"\r\n                                                        option={CountryData}\r\n                                                        validate={validateCountry}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"state\"\r\n                                                        lable=\"Select State*\"\r\n                                                        name=\"state\"\r\n                                                        option={StatesData}\r\n                                                        validate={validateState}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"City*\"\r\n                                                        name=\"city\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"checkbox\"\r\n                                                        lable=\"Skill*\"\r\n                                                        name=\"skill\"\r\n                                                        validate={validateSkills}\r\n                                                        options={checkBoxOptions}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Pincode*\"\r\n                                                        name=\"pinCode\"\r\n                                                        validate={pinValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Confirm Password*\"\r\n                                                        name=\"confirmPassword\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"textarea\"\r\n                                                        lable=\"Address*\"\r\n                                                        name=\"address\"\r\n                                                    />\r\n                                                    <label htmlFor=\"captcha\">Captcha</label>\r\n                                                    <Recaptcha\r\n                                                        sitekey=\"6Lf-RwsaAAAAAP42dLJgYMQ8K6oK4xmrFG_NUSWP\"\r\n                                                        render=\"explicit\"\r\n                                                        onChange={(e) => {\r\n                                                            handlecaptcha(e);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"text-center\">\r\n                                                <Button\r\n                                                    className=\"button\"\r\n                                                    type=\"submit\"\r\n                                                    variant=\"success\"\r\n                                                    disabled={!formik.isValid || captcha === \"\"}\r\n                                                >\r\n                                                    Submit\r\n                                                 </Button>\r\n                                                <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                    Reset\r\n                                            </Button>\r\n                                            </div>\r\n                                        </Form>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                        </div>\r\n                        <div className=\"image col-4\">\r\n                            <img\r\n                                src=\"https://i.pinimg.com/originals/f1/a3/c0/f1a3c03479f4437eb83d26eb1f13ae71.png\"\r\n                                height=\"80%\"\r\n                                width=\"85%\"\r\n                                alt=\"Login With Social Media\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default Register","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\services\\isEmpty.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\services\\header.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\componentIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\Header.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Footer\\Footer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\HeaderAndSidebar.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Header\\SidebarData.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Checkbox.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Country.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Datepicker.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\FormikControl.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Input.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Map.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Radio.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Select.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Slider.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\States.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\TextError.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\components\\Pages\\Textarea.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\reducerIndex.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\getAllBlogReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\appStateReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reducer\\getBlogByIdReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\state\\State.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\action\\download.js",["546","547","548"],{"ruleId":"549","replacedBy":"550"},{"ruleId":"551","replacedBy":"552"},{"ruleId":"549","replacedBy":"553"},{"ruleId":"551","replacedBy":"554"},{"ruleId":"555","severity":1,"message":"556","line":25,"column":82,"nodeType":"557","messageId":"558","endLine":25,"endColumn":84},{"ruleId":"555","severity":1,"message":"556","line":25,"column":118,"nodeType":"557","messageId":"558","endLine":25,"endColumn":120},{"ruleId":"555","severity":1,"message":"559","line":25,"column":118,"nodeType":"557","messageId":"558","endLine":25,"endColumn":120},{"ruleId":"555","severity":1,"message":"559","line":25,"column":136,"nodeType":"557","messageId":"558","endLine":25,"endColumn":138},{"ruleId":"560","severity":1,"message":"561","line":1,"column":17,"nodeType":"562","messageId":"563","endLine":1,"endColumn":23},{"ruleId":"560","severity":1,"message":"564","line":11,"column":8,"nodeType":"562","messageId":"563","endLine":11,"endColumn":16},{"ruleId":"560","severity":1,"message":"565","line":12,"column":8,"nodeType":"562","messageId":"563","endLine":12,"endColumn":16},{"ruleId":"560","severity":1,"message":"566","line":8,"column":22,"nodeType":"562","messageId":"563","endLine":8,"endColumn":32},{"ruleId":"567","severity":1,"message":"568","line":16,"column":8,"nodeType":"569","endLine":16,"endColumn":10,"suggestions":"570"},{"ruleId":"567","severity":1,"message":"568","line":29,"column":8,"nodeType":"569","endLine":29,"endColumn":10,"suggestions":"571"},{"ruleId":"567","severity":1,"message":"568","line":26,"column":8,"nodeType":"569","endLine":26,"endColumn":10,"suggestions":"572"},{"ruleId":"560","severity":1,"message":"573","line":1,"column":28,"nodeType":"562","messageId":"563","endLine":1,"endColumn":36},{"ruleId":"567","severity":1,"message":"574","line":20,"column":8,"nodeType":"569","endLine":20,"endColumn":10,"suggestions":"575"},{"ruleId":"567","severity":1,"message":"568","line":38,"column":8,"nodeType":"569","endLine":38,"endColumn":10,"suggestions":"576"},{"ruleId":"567","severity":1,"message":"568","line":41,"column":8,"nodeType":"569","endLine":41,"endColumn":10,"suggestions":"577"},{"ruleId":"567","severity":1,"message":"568","line":17,"column":8,"nodeType":"569","endLine":17,"endColumn":10,"suggestions":"578"},{"ruleId":"567","severity":1,"message":"568","line":47,"column":8,"nodeType":"569","endLine":47,"endColumn":10,"suggestions":"579"},{"ruleId":"580","severity":1,"message":"581","line":170,"column":65,"nodeType":"582","endLine":170,"endColumn":107},{"ruleId":"567","severity":1,"message":"568","line":25,"column":8,"nodeType":"569","endLine":25,"endColumn":10,"suggestions":"583"},{"ruleId":"567","severity":1,"message":"574","line":20,"column":8,"nodeType":"569","endLine":20,"endColumn":10,"suggestions":"584"},{"ruleId":"567","severity":1,"message":"568","line":38,"column":8,"nodeType":"569","endLine":38,"endColumn":10,"suggestions":"585"},{"ruleId":"567","severity":1,"message":"568","line":40,"column":8,"nodeType":"569","endLine":40,"endColumn":10,"suggestions":"586"},{"ruleId":"560","severity":1,"message":"587","line":2,"column":10,"nodeType":"562","messageId":"563","endLine":2,"endColumn":15},{"ruleId":"560","severity":1,"message":"588","line":3,"column":8,"nodeType":"562","messageId":"563","endLine":3,"endColumn":20},{"ruleId":"560","severity":1,"message":"589","line":4,"column":10,"nodeType":"562","messageId":"563","endLine":4,"endColumn":25},"no-native-reassign",["590"],"no-negated-in-lhs",["591"],["590"],["591"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'profile2' is defined but never used.","'profile3' is defined but never used.","'singleBlog' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["592"],["593"],["594"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'updateData'. Either include them or remove the dependency array.",["595"],["596"],["597"],["598"],["599"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["600"],["601"],["602"],["603"],"'toast' is defined but never used.","'FileDownload' is defined but never used.","'headerWithToken' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"604","fix":"605"},{"desc":"604","fix":"606"},{"desc":"604","fix":"607"},{"desc":"608","fix":"609"},{"desc":"604","fix":"610"},{"desc":"604","fix":"611"},{"desc":"604","fix":"612"},{"desc":"604","fix":"613"},{"desc":"604","fix":"614"},{"desc":"608","fix":"615"},{"desc":"604","fix":"616"},{"desc":"604","fix":"617"},"Update the dependencies array to be: [dispatch]",{"range":"618","text":"619"},{"range":"620","text":"619"},{"range":"621","text":"619"},"Update the dependencies array to be: [dispatch, updateData]",{"range":"622","text":"623"},{"range":"624","text":"619"},{"range":"625","text":"619"},{"range":"626","text":"619"},{"range":"627","text":"619"},{"range":"628","text":"619"},{"range":"629","text":"623"},{"range":"630","text":"619"},{"range":"631","text":"619"},[565,567],"[dispatch]",[1040,1042],[1045,1047],[782,784],"[dispatch, updateData]",[1298,1300],[1444,1446],[628,630],[1575,1577],[1043,1045],[772,774],[1298,1300],[1442,1444]]