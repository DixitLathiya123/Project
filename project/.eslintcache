[{"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\index.js":"1","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\App.js":"2","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reportWebVitals.js":"3","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\FormikControl.js":"4","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Input.js":"5","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Textarea.js":"6","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Select.js":"7","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Radio.js":"8","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Checkbox.js":"9","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Datepicker.js":"10","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\TextError.js":"11","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Actions.js":"12","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Store.js":"13","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Reducers.js":"14","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\State.js":"15","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Login.js":"16","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Contact.js":"17","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Home.js":"18","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Error404.js":"19","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\RegisterPage.js":"20","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\RootReducer.js":"21","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Map.js":"22","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\Dashbord.js":"23","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Header\\HeaderAndSidebar.js":"24","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Header\\SidebarData.js":"25","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\UpdateProfile.js":"26","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\TableView.js":"27","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Header.js":"28","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Country.js":"29","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\States.js":"30","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateRouter\\Auth.js":"31","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateRouter\\PrivateRouter.js":"32","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Forgot.js":"33","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\ForgetToNew.js":"34","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Slider.js":"35","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\CreateBlog.js":"36","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\ResetPassword.js":"37","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\SingleBlog.js":"38","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\header.js":"39","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\isEmpty.js":"40","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Footer.js":"41","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\LandingPage.js":"42","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes.js":"43"},{"size":287,"mtime":1609495248542,"results":"44","hashOfConfig":"45"},{"size":509,"mtime":1609740384473,"results":"46","hashOfConfig":"45"},{"size":361,"mtime":1609495253860,"results":"47","hashOfConfig":"45"},{"size":953,"mtime":1609494296036,"results":"48","hashOfConfig":"45"},{"size":535,"mtime":1609738234118,"results":"49","hashOfConfig":"45"},{"size":476,"mtime":1609494344681,"results":"50","hashOfConfig":"45"},{"size":819,"mtime":1609494323518,"results":"51","hashOfConfig":"45"},{"size":1066,"mtime":1609494314779,"results":"52","hashOfConfig":"45"},{"size":1606,"mtime":1609736248887,"results":"53","hashOfConfig":"45"},{"size":1162,"mtime":1609494291255,"results":"54","hashOfConfig":"45"},{"size":422,"mtime":1609742807625,"results":"55","hashOfConfig":"45"},{"size":18189,"mtime":1609758000291,"results":"56","hashOfConfig":"45"},{"size":309,"mtime":1609576312275,"results":"57","hashOfConfig":"45"},{"size":7801,"mtime":1609735820140,"results":"58","hashOfConfig":"45"},{"size":2445,"mtime":1609758198593,"results":"59","hashOfConfig":"45"},{"size":3674,"mtime":1609740530562,"results":"60","hashOfConfig":"45"},{"size":6405,"mtime":1609743041176,"results":"61","hashOfConfig":"45"},{"size":6331,"mtime":1609741608226,"results":"62","hashOfConfig":"45"},{"size":169,"mtime":1609494388285,"results":"63","hashOfConfig":"45"},{"size":12689,"mtime":1609743351300,"results":"64","hashOfConfig":"45"},{"size":1071,"mtime":1609735279499,"results":"65","hashOfConfig":"45"},{"size":647,"mtime":1609494309974,"results":"66","hashOfConfig":"45"},{"size":8088,"mtime":1609762204794,"results":"67","hashOfConfig":"45"},{"size":2270,"mtime":1609740461817,"results":"68","hashOfConfig":"45"},{"size":512,"mtime":1609740464878,"results":"69","hashOfConfig":"45"},{"size":9226,"mtime":1609740651732,"results":"70","hashOfConfig":"45"},{"size":613,"mtime":1609494180651,"results":"71","hashOfConfig":"45"},{"size":989,"mtime":1609742169155,"results":"72","hashOfConfig":"45"},{"size":897,"mtime":1609494283652,"results":"73","hashOfConfig":"45"},{"size":891,"mtime":1609494338718,"results":"74","hashOfConfig":"45"},{"size":201,"mtime":1609393103111,"results":"75","hashOfConfig":"45"},{"size":585,"mtime":1609751482101,"results":"76","hashOfConfig":"45"},{"size":2581,"mtime":1609494484118,"results":"77","hashOfConfig":"45"},{"size":3573,"mtime":1609740525688,"results":"78","hashOfConfig":"45"},{"size":1352,"mtime":1609494334733,"results":"79","hashOfConfig":"45"},{"size":4409,"mtime":1609753562961,"results":"80","hashOfConfig":"45"},{"size":3826,"mtime":1609740768913,"results":"81","hashOfConfig":"45"},{"size":8557,"mtime":1609740472374,"results":"82","hashOfConfig":"45"},{"size":240,"mtime":1609766417941,"results":"83","hashOfConfig":"45"},{"size":121,"mtime":1609495219446,"results":"84","hashOfConfig":"45"},{"size":430,"mtime":1609741978988,"results":"85","hashOfConfig":"45"},{"size":422,"mtime":1609742120019,"results":"86","hashOfConfig":"45"},{"size":2435,"mtime":1609742303204,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"vrpkdh",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"90"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"90"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\index.js",[],["179","180"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\App.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\reportWebVitals.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\FormikControl.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Input.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Textarea.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Select.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Radio.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Checkbox.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Datepicker.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\TextError.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Actions.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Store.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\Reducers.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\State.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Login.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Contact.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Home.js",["181"],"import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Card } from 'antd';\r\nimport { Formik, Form } from 'formik'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport * as Yup from 'yup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Loader from 'react-loader-spinner'\r\n\r\nimport { isEmpty } from '../../Services/isEmpty'\r\nimport { isAuthenticated } from '../../PrivateRouter/Auth'\r\nimport Header from './Header'\r\nimport Slider from '../Pages/Slider'\r\nimport { getAllBlog } from '../../Redux/Actions'\r\nimport Like from '../Image/likeImage.png'\r\nimport disLike from '../Image/dislike.png'\r\nimport comment from '../Image/comment.png'\r\nimport FormikControl from '../Pages/FormikControl'\r\nimport { userGoingForLogin } from '../../Redux/Actions'\r\n\r\n\r\nfunction Home(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n\r\n    const { Meta } = Card;\r\n    const dispatch = useDispatch()\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const Blog = useSelector(state => state.getAllBlog.Blogs.blogList)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllBlog())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        email: '',\r\n        password: '',\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        email: Yup.string().email('Invalid Format*').required('Email Required*'),\r\n        password: Yup.string().length(6).required('Password Required*')\r\n    })\r\n\r\n    const onSubmit = values => dispatch(userGoingForLogin(values, props))\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <Slider />\r\n            <div className=\"row allblog\">\r\n                {isEmpty(Blog) &&\r\n                    <div className=\"loader\">\r\n                        <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n                    </div>\r\n                }\r\n                {\r\n                    !isEmpty(Blog) && Blog.map((item, i) => {\r\n                        return (\r\n                            <>\r\n                                <Card key={i}\r\n                                    className=\"blogimage\"\r\n                                    hoverable\r\n                                    style={{ width: 300 }}\r\n                                    cover={<img alt=\"example\" src=\"https://www.talkwalker.com/images/2020/blog-headers/image-analysis.png\" />}\r\n                                >\r\n                                    <Meta className=\"blogContent\" title={item.blogTitle} description={item.blogContent} />\r\n                                    <div className=\"row social\">\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={Like} alt=\"like\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={disLike} alt=\"dislike\" height=\"100%\" width=\"100%\" /></button>\r\n                                        <button className=\"likeDislikeButton\" onClick={() => { handleShow() }}><img hoverable src={comment} alt=\"comment\" height=\"100%\" width=\"100%\" /></button>\r\n                                    </div>\r\n                                </Card>\r\n                            </>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <Modal show={show} onHide={() => { handleClose() }} className=\"modal\">\r\n                <Modal.Header closeButton  style={{\"outline\": \"none\"}}>\r\n                    <Modal.Title>Sign In</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"loginpopup\">\r\n                        <div className=\"row\" style={{ \"justifyContent\": \"center\" }}>\r\n                            <div className=\"form col-6\" >\r\n                                <Formik\r\n                                    initialValues={initialValues}\r\n                                    validationSchema={validationSchema}\r\n                                    onSubmit={onSubmit}\r\n                                >\r\n                                    {\r\n                                        (formik) => {\r\n                                            return (\r\n                                                <Form>\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <div className=\"btndiv\">\r\n                                                        <Button className=\"button\" type=\"submit\" variant=\"info\">Login</Button>\r\n                                                        <Button className=\"button\" variant=\"info\" onClick={() => { history.push(`/register`); }}>Register</Button >\r\n                                                    </div>\r\n                                                    <div className=\"forgot\"><Link to=\"forgot\">Forgot password?</Link></div>\r\n                                                </Form>\r\n                                            )\r\n                                        }\r\n                                    }\r\n                                </Formik>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Error404.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\RegisterPage.js",["182"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\n\r\n\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Recaptcha from \"react-google-recaptcha\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport FormikControl from \"../Pages/FormikControl\";\r\nimport Header from \"./Header\";\r\nimport { isAuthenticated } from '../../PrivateRouter/Auth'\r\nimport { userGoingForRegister, getAllCountry, getAllstate } from \"../../Redux/Actions\";\r\nimport { isEmpty } from \"../../Services/isEmpty\";\r\n\r\nconst option = [\r\n    { key: \"Select Course\", value: \"\" },\r\n    { key: \"BCA\", value: \"bca\" },\r\n    { key: \"BBA\", value: \"bba\" },\r\n    { key: \"BCOM\", value: \"bcom\" },\r\n];\r\nconst checkBoxOptions = [\r\n    { key: \"Cricket\", value: \"cricket\" },\r\n    { key: \"Reading\", value: \"reading\" },\r\n];\r\n\r\nfunction Register(props) {\r\n    const history = useHistory()\r\n\r\n    if (isAuthenticated() !== false) {\r\n        history.push(\"/dashbord\")\r\n    }\r\n    const dispatch = useDispatch();\r\n    const [captcha, setCaptcha] = useState(\"\");\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    useEffect(() => {\r\n        dispatch(getAllCountry())\r\n    }, [])\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        phoneNo: \"\",\r\n        pinCode: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        course: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        country: \"\",\r\n        address: \"\",\r\n        skill: [],\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        password: Yup.string().length(6).required(\"Password required *\"),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref(\"password\")], \"password miss match*\")\r\n            .required(\"ConfimPassword required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const phoneValidate = (phone) => {\r\n        isNaN(phone)\r\n        let error;\r\n        if (isEmpty(phone)) {\r\n            error = \"phoneNo required!\"\r\n        }\r\n        else if (phone.length !== 10) {\r\n            error = \"phoneNo length must be 10\"\r\n        }\r\n        if (isNaN(phone) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n    const pinValidate = (pin) => {\r\n        isNaN(pin)\r\n        let error;\r\n        if (isEmpty(pin)) {\r\n            error = \"pinNo required!\"\r\n        }\r\n        else if (pin.length !== 6) {\r\n            error = \"pinNo length must be 6\"\r\n        }\r\n        if (isNaN(pin) === true) {\r\n            error = \"Only Number Allowed\"\r\n        }\r\n        return error\r\n    }\r\n\r\n    const onSubmit = (values) => dispatch(userGoingForRegister(values, props));\r\n    const handlecaptcha = (e) => setCaptcha(e);\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <ToastContainer />\r\n            <Card className=\"card\">\r\n                <Card.Body className=\"cardbody\">\r\n                    <div className=\"row\">\r\n                        <div className=\"form col-8\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                {(formik) => {\r\n                                    return (\r\n                                        <Form>\r\n                                            <h1 align=\"center\">Sign Up</h1>\r\n                                            <div className=\"row\">\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Name*\"\r\n                                                        name=\"name\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"email\"\r\n                                                        lable=\"Email*\"\r\n                                                        name=\"email\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"PhoneNo*\"\r\n                                                        name=\"phoneNo\"\r\n                                                        validate={phoneValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"select\"\r\n                                                        lable=\"Select Course*\"\r\n                                                        name=\"course\"\r\n                                                        option={option}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"country\"\r\n                                                        lable=\"Select Country*\"\r\n                                                        name=\"country\"\r\n                                                        option={CountryData}\r\n                                                        validate={validateCountry}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"state\"\r\n                                                        lable=\"Select State*\"\r\n                                                        name=\"state\"\r\n                                                        option={StatesData}\r\n                                                        validate={validateState}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"City*\"\r\n                                                        name=\"city\"\r\n                                                    />\r\n                                                </div>\r\n                                                <div className=\"col-6\">\r\n                                                    <FormikControl\r\n                                                        control=\"checkbox\"\r\n                                                        lable=\"Skill*\"\r\n                                                        name=\"skill\"\r\n                                                        validate={validateSkills}\r\n                                                        options={checkBoxOptions}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"text\"\r\n                                                        lable=\"Pincode*\"\r\n                                                        name=\"pinCode\"\r\n                                                        validate={pinValidate}\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Password*\"\r\n                                                        name=\"password\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"input\"\r\n                                                        type=\"password\"\r\n                                                        lable=\"Confirm Password*\"\r\n                                                        name=\"confirmPassword\"\r\n                                                    />\r\n                                                    <FormikControl\r\n                                                        control=\"textarea\"\r\n                                                        lable=\"Address*\"\r\n                                                        name=\"address\"\r\n                                                    />\r\n                                                    <label htmlFor=\"captcha\">Captcha</label>\r\n                                                    <Recaptcha\r\n                                                        sitekey=\"6Lf-RwsaAAAAAP42dLJgYMQ8K6oK4xmrFG_NUSWP\"\r\n                                                        render=\"explicit\"\r\n                                                        onChange={(e) => {\r\n                                                            handlecaptcha(e);\r\n                                                        }}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div className=\"text-center\">\r\n                                                <Button\r\n                                                    className=\"button\"\r\n                                                    type=\"submit\"\r\n                                                    variant=\"success\"\r\n                                                    disabled={!formik.isValid || captcha === \"\"}\r\n                                                >\r\n                                                    Submit\r\n                                                 </Button>\r\n                                                <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                    Reset\r\n                                            </Button>\r\n                                            </div>\r\n                                        </Form>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                        </div>\r\n                        <div className=\"image col-4\">\r\n                            <img\r\n                                src=\"https://i.pinimg.com/originals/f1/a3/c0/f1a3c03479f4437eb83d26eb1f13ae71.png\"\r\n                                height=\"80%\"\r\n                                width=\"85%\"\r\n                                alt=\"Login With Social Media\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default Register","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Redux\\RootReducer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Map.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\Dashbord.js",["183"],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Header\\HeaderAndSidebar.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Header\\SidebarData.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\UpdateProfile.js",["184","185"],"import React, { useEffect, useState } from 'react'\r\nimport { Formik, Form } from \"formik\";\r\nimport { Button } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom';\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nimport FormikControl from \"../../PublicFolder/Pages/FormikControl\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getUserById, getAllCountry, getAllstate ,updateProfile } from '../../Redux/Actions';\r\nimport HeaderAndSidebar from '../Header/HeaderAndSidebar'\r\nimport * as Yup from \"yup\";\r\n\r\nfunction UpdateProfile() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getUserById())\r\n        dispatch(getAllCountry())\r\n    }, [])\r\n\r\n    const CountryData = useSelector(state => state.initialState.countries.CountryData)\r\n    const StatesData = useSelector(state => state.initialState.states.StateData)\r\n\r\n    const option = [\r\n        { key: \"Select Course\", value: \"\" },\r\n        { key: \"BCA\", value: \"bca\" },\r\n        { key: \"BBA\", value: \"bba\" },\r\n        { key: \"BCOM\", value: \"bcom\" },\r\n    ];\r\n\r\n    const checkBoxOptions = [\r\n        { key: \"Cricket\", value: \"cricket\" },\r\n        { key: \"Reading\", value: \"reading\" },\r\n    ];\r\n\r\n    const initialValues = {\r\n        name: \"\",\r\n        phoneNo: \"\",\r\n        pinCode: \"\",\r\n        email: \"\",\r\n        course: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        country: \"\",\r\n        address: \"\",\r\n        skill: [],\r\n    };\r\n\r\n    const validationSchema = Yup.object({\r\n        name: Yup.string().required(\"Name required *\"),\r\n        phoneNo: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"PhoneNo required *\"),\r\n        pinCode: Yup.number()\r\n            .typeError(\"Only Number Allowed\")\r\n            .required(\"Pincode required *\"),\r\n        email: Yup.string().email(\"Invalid Format*\").required(\"Email required *\"),\r\n        course: Yup.string().required(\"Course required *\"),\r\n        city: Yup.string().required(\"City required *\"),\r\n        address: Yup.string().required(\"Address required *\"),\r\n    });\r\n\r\n    const validateSkills = (values) => {\r\n        let error;\r\n        if (values.length === 0) {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n    const validateCountry = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        else {\r\n            dispatch(getAllstate(values));\r\n        }\r\n        return error;\r\n    };\r\n    const validateState = (values) => {\r\n        let error;\r\n        if (values === '') {\r\n            error = \"Required!\";\r\n        }\r\n        return error;\r\n    };\r\n\r\n    const onSubmit = (values,onSubmitProps) => {\r\n      dispatch(updateProfile(values,onSubmitProps))  \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <HeaderAndSidebar title=\"update\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12  blogbutton\">\r\n                        <Button className=\"blogbutton2\" variant=\"dark\"><Link to=\"/resetPassword\">Reset Password</Link></Button >\r\n                    </div>\r\n                </div>\r\n                <div className=\"form\">\r\n                    <Card className=\"card\">\r\n                        <Card.Body className=\"cardbody\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                validationSchema={validationSchema}\r\n                                onSubmit={onSubmit}\r\n                            >\r\n                                {(formik) => {\r\n                                    return (\r\n                                        <Form className=\"formUpdate\">\r\n                                            <div >\r\n                                                <h1 align=\"center\">Update Profile</h1>\r\n                                                <FormikControl\r\n                                                    control=\"input\"\r\n                                                    type=\"text\"\r\n                                                    lable=\"Name*\"\r\n                                                    name=\"name\"\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"input\"\r\n                                                    type=\"email\"\r\n                                                    lable=\"Email*\"\r\n                                                    name=\"email\"\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"input\"\r\n                                                    type=\"text\"\r\n                                                    lable=\"PhoneNo*\"\r\n                                                    name=\"phoneNo\"\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"select\"\r\n                                                    lable=\"Select Course*\"\r\n                                                    name=\"course\"\r\n                                                    option={option}\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"country\"\r\n                                                    lable=\"Select Country*\"\r\n                                                    name=\"country\"\r\n                                                    option={CountryData}\r\n                                                    validate={validateCountry}\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"state\"\r\n                                                    lable=\"Select State*\"\r\n                                                    name=\"state\"\r\n                                                    option={StatesData}\r\n                                                    validate={validateState}\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"input\"\r\n                                                    type=\"text\"\r\n                                                    lable=\"City*\"\r\n                                                    name=\"city\"\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"checkbox\"\r\n                                                    lable=\"Skill*\"\r\n                                                    name=\"skill\"\r\n                                                    validate={validateSkills}\r\n                                                    options={checkBoxOptions}\r\n                                                />\r\n                                                <FormikControl\r\n                                                    control=\"input\"\r\n                                                    type=\"text\"\r\n                                                    lable=\"Pincode*\"\r\n                                                    name=\"pinCode\"\r\n                                                />\r\n\r\n                                                <FormikControl\r\n                                                    control=\"textarea\"\r\n                                                    lable=\"Address*\"\r\n                                                    name=\"address\"\r\n                                                />\r\n                                                <div className=\"text-center\">\r\n                                                    <Button\r\n                                                        className=\"button\"\r\n                                                        type=\"submit\"\r\n                                                        variant=\"success\"\r\n                                                        disabled={!formik.isValid}\r\n                                                    >\r\n                                                        Update\r\n                                                 </Button>\r\n                                                    <Button className=\"button\" type=\"reset\" variant=\"info\">\r\n                                                        Reset\r\n                                            </Button>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Form>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </div>\r\n            </HeaderAndSidebar>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateProfile","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\TableView.js",["186","187","188","189"],"import React, { useEffect } from 'react'\r\nimport HeaderAndSidebar from '../Header/HeaderAndSidebar'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getBlogById } from '../../Redux/Actions';\r\n\r\n\r\nfunction TableView() {\r\n    // const dispatch = useDispatch()\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(getBlogById())\r\n    // }, [])\r\n\r\n    // const blogById = useSelector(state => state.getBlogById.blogById.blog)\r\n    // console.log(blogById);\r\n\r\n    return (\r\n        <HeaderAndSidebar title=\"table\">\r\n           table 1\r\n        </HeaderAndSidebar>\r\n    )\r\n}\r\n\r\nexport default TableView\r\n","C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Header.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Country.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\States.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateRouter\\Auth.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateRouter\\PrivateRouter.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Forgot.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\ForgetToNew.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Pages\\Slider.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\CreateBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\ResetPassword.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PrivateFolder\\Pages\\SingleBlog.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\header.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Services\\isEmpty.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\PublicFolder\\Register\\Footer.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\LandingPage.js",[],"C:\\Users\\HP\\Desktop\\github\\Project\\project\\src\\Routes.js",[],{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":41,"column":8,"nodeType":"196","endLine":41,"endColumn":10,"suggestions":"197"},{"ruleId":"194","severity":1,"message":"195","line":44,"column":8,"nodeType":"196","endLine":44,"endColumn":10,"suggestions":"198"},{"ruleId":"194","severity":1,"message":"195","line":28,"column":8,"nodeType":"196","endLine":28,"endColumn":10,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":1,"column":28,"nodeType":"202","messageId":"203","endLine":1,"endColumn":36},{"ruleId":"194","severity":1,"message":"195","line":19,"column":8,"nodeType":"196","endLine":19,"endColumn":10,"suggestions":"204"},{"ruleId":"200","severity":1,"message":"205","line":1,"column":17,"nodeType":"202","messageId":"203","endLine":1,"endColumn":26},{"ruleId":"200","severity":1,"message":"206","line":3,"column":10,"nodeType":"202","messageId":"203","endLine":3,"endColumn":21},{"ruleId":"200","severity":1,"message":"207","line":3,"column":23,"nodeType":"202","messageId":"203","endLine":3,"endColumn":34},{"ruleId":"200","severity":1,"message":"208","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":21},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["211"],["212"],["213"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar",["214"],"'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'getBlogById' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},{"desc":"215","fix":"217"},{"desc":"215","fix":"218"},{"desc":"215","fix":"219"},"Update the dependencies array to be: [dispatch]",{"range":"220","text":"221"},{"range":"222","text":"221"},{"range":"223","text":"221"},{"range":"224","text":"221"},[1352,1354],"[dispatch]",[1465,1467],[1031,1033],[695,697]]